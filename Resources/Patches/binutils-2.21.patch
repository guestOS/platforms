diff --git a/ld/ldfile.c b/ld/ldfile.c
index 7cd501c..5f09418 100644
--- a/ld/ldfile.c
+++ b/ld/ldfile.c
@@ -45,6 +45,9 @@ const char * ldfile_output_machine_name = "";
 unsigned long ldfile_output_machine;
 enum bfd_architecture ldfile_output_architecture;
 search_dirs_type * search_head;
+/* cocotron.org begin */
+search_dirs_type * framework_search_head;
+/* cocotron.org end */

 #ifdef VMS
 static char * slash = "";
@@ -65,6 +68,9 @@ typedef struct search_arch
 static search_dirs_type **search_tail_ptr = &search_head;
 static search_arch_type *search_arch_head;
 static search_arch_type **search_arch_tail_ptr = &search_arch_head;
+/* cocotron.org begin */
+static search_dirs_type **framework_search_tail_ptr = &framework_search_head;
+/* cocotron.org end */

 /* Test whether a pathname, after canonicalization, is the same or a
    sub-directory of the sysroot directory.  */
@@ -127,6 +133,23 @@ ldfile_add_library_path (const char *name, bfd_boolean cmdline)
     }
 }

+/* cocotron.org begin */
+void ldfile_add_framework_path(const char *path) {
+  search_dirs_type *new;
+
+  new = xmalloc (sizeof (search_dirs_type));
+  new->next = NULL;
+  new->name = xstrdup (path);
+  new->cmdline = FALSE;
+  new->sysrooted = FALSE;
+
+  *framework_search_tail_ptr = new;
+  framework_search_tail_ptr = &new->next;
+}
+/* cocotron.org end */
+
+
+
 /* Try to open a BFD for a lang_input_statement.  */

 bfd_boolean
@@ -372,22 +395,54 @@ ldfile_open_file_search (const char *arch,
 	return FALSE;
     }

-  for (search = search_head; search != NULL; search = search->next)
+/* cocotron.org begin */
+  search=(entry->search_frameworks_flag)?framework_search_head:search_head;
+
+  for (; search != NULL; search = search->next)
     {
+      char *frameworkDirectory="";
       char *string;

+      if(entry->search_frameworks_flag){
+       frameworkDirectory=alloca(strlen(entry->filename)+strlen(".framework")+strlen(slash)+1);
+       sprintf(frameworkDirectory,"%s.framework%s",entry->filename,slash);
+      }
+
+
+
       if (entry->dynamic && ! link_info.relocatable)
 	{
-	  if (ldemul_open_dynamic_archive (arch, search, entry))
+      search_dirs_type check;
+      char            *shared=xmalloc(strlen(search->name)+strlen(slash)+strlen(frameworkDirectory)+1);
+
+      sprintf(shared,"%s%s%s",search->name,slash,frameworkDirectory);
+
+      check.next=NULL;
+      check.name=shared;
+      check.cmdline=search->cmdline;
+      check.sysrooted=search->sysrooted;
+
+	  if (ldemul_open_dynamic_archive (arch, &check, entry))
 	    {
 	      entry->sysrooted = search->sysrooted;
 	      return TRUE;
 	    }
 	}

+      string = xmalloc (strlen(frameworkDirectory)+strlen (search->name)
+			+ strlen (slash)
+			+ strlen (lib)
+			+ strlen (entry->filename)
+			+ strlen (arch)
+			+ strlen (suffix)
+			+ 1);
+
+
+
       if (entry->maybe_archive)
-	string = concat (search->name, slash, lib, entry->filename,
-			 arch, suffix, (const char *) NULL);
+	sprintf (string, "%s%s%s%s%s%s%s",search->name, slash,
+		 frameworkDirectory,lib, entry->filename, arch, suffix);
+/* cocotron.org end */
       else
 	string = concat (search->name, slash, entry->filename,
 			 (const char *) 0);
diff --git a/ld/ldfile.h b/ld/ldfile.h
index 9b79397..94819a5 100644
--- a/ld/ldfile.h
+++ b/ld/ldfile.h
@@ -44,6 +44,11 @@ typedef struct search_dirs {

 extern search_dirs_type *search_head;

+/* cocotron.org begin */
+extern search_dirs_type *framework_search_head;
+/* cocotron.org end */
+
+
 extern void ldfile_add_arch
   (const char *);
 extern void ldfile_add_library_path
@@ -52,6 +57,10 @@ extern void ldfile_open_command_file
   (const char *name);
 extern void ldfile_open_default_command_file
   (const char *name);
+/* cocotron.org begin */
+extern void ldfile_add_framework_path
+  (const char *);
+/* cocotron.org end */
 extern void ldfile_open_file
   (struct lang_input_statement_struct *);
 extern bfd_boolean ldfile_try_open_bfd
diff --git a/ld/ldlang.c b/ld/ldlang.c
index 8b05d8e..e92f216 100644
--- a/ld/ldlang.c
+++ b/ld/ldlang.c
@@ -1020,6 +1020,9 @@ new_afile (const char *name,
       p->local_sym_name = name;
       p->just_syms_flag = TRUE;
       p->search_dirs_flag = FALSE;
+/* cocotron.org begin */
+      p->search_frameworks_flag= FALSE;
+/* cocotron.org end */
       break;
     case lang_input_file_is_fake_enum:
       p->filename = name;
@@ -1028,6 +1031,9 @@ new_afile (const char *name,
       p->local_sym_name = name;
       p->just_syms_flag = FALSE;
       p->search_dirs_flag = FALSE;
+/* cocotron.org begin */
+      p->search_frameworks_flag= FALSE;
+/* cocotron.org end */
       break;
     case lang_input_file_is_l_enum:
       p->maybe_archive = TRUE;
@@ -1036,6 +1042,9 @@ new_afile (const char *name,
       p->local_sym_name = concat ("-l", name, (const char *) NULL);
       p->just_syms_flag = FALSE;
       p->search_dirs_flag = TRUE;
+/* cocotron.org begin */
+      p->search_frameworks_flag= FALSE;
+/* cocotron.org end */
       break;
     case lang_input_file_is_marker_enum:
       p->filename = name;
@@ -1044,6 +1053,9 @@ new_afile (const char *name,
       p->local_sym_name = name;
       p->just_syms_flag = FALSE;
       p->search_dirs_flag = TRUE;
+/* cocotron.org begin */
+      p->search_frameworks_flag= FALSE;
+/* cocotron.org end */
       break;
     case lang_input_file_is_search_file_enum:
       p->sysrooted = ldlang_sysrooted_script;
@@ -1053,6 +1065,9 @@ new_afile (const char *name,
       p->local_sym_name = name;
       p->just_syms_flag = FALSE;
       p->search_dirs_flag = TRUE;
+/* cocotron.org begin */
+      p->search_frameworks_flag= FALSE;
+/* cocotron.org end */
       break;
     case lang_input_file_is_file_enum:
       p->filename = name;
@@ -1061,7 +1076,21 @@ new_afile (const char *name,
       p->local_sym_name = name;
       p->just_syms_flag = FALSE;
       p->search_dirs_flag = FALSE;
+/* cocotron.org begin */
+      p->search_frameworks_flag= FALSE;
+/* cocotron.org end */
       break;
+/* cocotron.org begin */
+    case lang_input_file_is_framework_enum:
+      p-> maybe_archive = TRUE;
+      p->filename = name;
+      p->real = TRUE;
+      p->local_sym_name = concat ("-l", name, NULL);
+      p->just_syms_flag = FALSE;
+      p->search_dirs_flag = TRUE;
+      p->search_frameworks_flag= TRUE;
+      break;
+/* cocotron.org end */
     default:
       FAIL ();
     }
@@ -1093,6 +1122,28 @@ lang_add_input_file (const char *name,
   return new_afile (name, file_type, target, TRUE);
 }

+/* cocotron.org begin */
+extern void lang_add_input_filelist(const char *name) {
+ FILE *file=fopen(name,"r");
+ char *result,buffer[2048];
+
+ if(file==NULL)
+  fprintf(stderr,"Unable to open %s\n",name);
+
+ while((result=fgets(buffer,2048,file))!=NULL){
+  int len=strlen(buffer);
+
+  for(;len>0 && buffer[len]<' ';len--)
+   buffer[len]='\0';
+
+  lang_add_input_file(xstrdup (buffer),lang_input_file_is_file_enum,NULL);
+ }
+
+ fclose(file);
+}
+/* cocotron.org end */
+
+
 struct out_section_hash_entry
 {
   struct bfd_hash_entry root;
diff --git a/ld/ldlang.h b/ld/ldlang.h
index e599385..ed28192 100644
--- a/ld/ldlang.h
+++ b/ld/ldlang.h
@@ -32,7 +32,10 @@ typedef enum
   lang_input_file_is_marker_enum,
   lang_input_file_is_fake_enum,
   lang_input_file_is_search_file_enum,
-  lang_input_file_is_file_enum
+  lang_input_file_is_file_enum,
+/* cocotron.org begin */
+  lang_input_file_is_framework_enum
+/* cocotron.org end */
 } lang_input_file_enum_type;

 struct _fill_type
@@ -254,6 +257,13 @@ typedef struct lang_input_statement_struct
   /* 1 means search a set of directories for this file.  */
   unsigned int search_dirs_flag : 1;

+/* cocotron.org begin */
+  /* 1 means we search the frameworks path */
+  unsigned int search_frameworks_flag : 1;
+/* cocotron.org end */
+
+
+
   /* 1 means this was found in a search directory marked as sysrooted,
      if search_dirs_flag is false, otherwise, that it should be
      searched in ld_sysroot before any other location, as long as it
@@ -566,6 +576,9 @@ extern lang_output_section_statement_type *lang_insert_orphan
    struct orphan_save *, etree_type *, lang_statement_list_type *);
 extern lang_input_statement_type *lang_add_input_file
   (const char *, lang_input_file_enum_type, const char *);
+/* cocotron.org begin */
+extern void lang_add_input_filelist(const char *);
+/* cocotron.org end */
 extern void lang_add_keepsyms_file
   (const char *);
 extern lang_output_section_statement_type *lang_output_section_statement_lookup
diff --git a/ld/lexsup.c b/ld/lexsup.c
index e9e89be..126b13a 100644
--- a/ld/lexsup.c
+++ b/ld/lexsup.c
@@ -175,6 +175,12 @@ enum option_values
   OPTION_PLUGIN_OPT,
 #endif /* ENABLE_PLUGINS */
   OPTION_DEFAULT_SCRIPT,
+/* cocotron.org begin */
+  OPTION_FILTER,
+  OPTION_FRAMEWORK,
+  OPTION_FILELIST,
+  OPTION_SINGLE_MODULE
+/* cocotron.org end */
 };

 /* The long options.  This structure is used for both the option
@@ -242,8 +248,10 @@ static const struct ld_option ld_options[] =
   { {"auxiliary", required_argument, NULL, 'f'},
     'f', N_("SHLIB"), N_("Auxiliary filter for shared object symbol table"),
     TWO_DASHES },
-  { {"filter", required_argument, NULL, 'F'},
-    'F', N_("SHLIB"), N_("Filter for shared object symbol table"),
+/* cocotron.org begin */
+  { {"filter", required_argument, NULL, OPTION_FILTER},
+    '\0', N_("SHLIB"), N_("Filter for shared object symbol table"),
+/* cocotron.org end */
     TWO_DASHES },
   { {NULL, no_argument, NULL, '\0'},
     'g', NULL, N_("Ignored"), ONE_DASH },
@@ -610,6 +618,16 @@ static const struct ld_option ld_options[] =
     TWO_DASHES },
   { {"wrap", required_argument, NULL, OPTION_WRAP},
     '\0', N_("SYMBOL"), N_("Use wrapper functions for SYMBOL"), TWO_DASHES },
+/* cocotron.org begin */
+  { {"framework", required_argument, NULL, OPTION_FRAMEWORK },
+    '\0', NULL, N_("Link named framework"), ONE_DASH },
+  { {"filelist", required_argument, NULL, OPTION_FILELIST },
+    '\0', NULL, N_("Link files in filelist"), ONE_DASH },
+  { {"framework-path", required_argument, NULL, 'F' },
+    'F', N_("DIRECTORY"), N_("Add DIRECTORY to framework search path"), ONE_DASH },
+  { {"single_module", no_argument, NULL, OPTION_SINGLE_MODULE },
+    '\0', NULL, N_("Create single module"), ONE_DASH },
+/* cocotron.org end */
 };

 #define OPTION_COUNT ARRAY_SIZE (ld_options)
@@ -891,7 +909,9 @@ parse_args (unsigned argc, char **argv)
 	      command_line.auxiliary_filters[c + 1] = NULL;
 	    }
 	  break;
-	case 'F':
+/* cocotron.org begin */
+	case OPTION_FILTER:
+/* cocotron.org end */
 	  command_line.filter_shlib = optarg;
 	  break;
 	case OPTION_FORCE_EXE_SUFFIX:
@@ -1536,6 +1556,21 @@ parse_args (unsigned argc, char **argv)
               einfo (_("%P%X: --hash-size needs a numeric argument\n"));
           }
           break;
+/* cocotron.org begin */
+	case OPTION_FRAMEWORK:
+	  config.dynamic_link = TRUE;
+	  lang_add_input_file (optarg, lang_input_file_is_framework_enum, NULL);
+    	  break;
+   	 case 'F':
+	  ldfile_add_framework_path (optarg);
+  	    break;
+  	 case OPTION_FILELIST:
+  	   lang_add_input_filelist(optarg);
+   	  break;
+
+ 	 case OPTION_SINGLE_MODULE:
+    	  break;
+/* cocotron.org end */
 	}
     }

