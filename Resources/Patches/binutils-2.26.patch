diff --git a/gas/config/tc-i386.c b/gas/config/tc-i386.c
index 1573043..d6b1be6 100644
--- a/gas/config/tc-i386.c
+++ b/gas/config/tc-i386.c
@@ -4218,6 +4218,8 @@ optimize_imm (void)
 		i.op[op].imms->X_add_number =
 		  (((i.op[op].imms->X_add_number & 0xffff) ^ 0x8000) - 0x8000);
 	      }
+#ifdef BFD64
+      /* Store 32-bit immediate in 64-bit for 64-bit BFD.  */
 	    if ((i.types[op].bitfield.imm32)
 		&& ((i.op[op].imms->X_add_number & ~(((offsetT) 2 << 31) - 1))
 		    == 0))
@@ -4226,6 +4228,7 @@ optimize_imm (void)
 						^ ((offsetT) 1 << 31))
 					       - ((offsetT) 1 << 31));
 	      }
+#endif
 	    i.types[op]
 	      = operand_type_or (i.types[op],
 				 smallest_imm_type (i.op[op].imms->X_add_number));
@@ -4306,6 +4309,8 @@ optimize_disp (void)
 		op_disp = (((op_disp & 0xffff) ^ 0x8000) - 0x8000);
 		i.types[op].bitfield.disp64 = 0;
 	      }
+#ifdef BFD64
+      /* Optimize 64-bit displacement to 32-bit for 64-bit BFD.  */
 	    if (i.types[op].bitfield.disp32
 		&& (op_disp & ~(((offsetT) 2 << 31) - 1)) == 0)
 	      {
@@ -4316,6 +4321,7 @@ optimize_disp (void)
 		op_disp = (op_disp ^ ((offsetT) 1 << 31)) - ((addressT) 1 << 31);
 		i.types[op].bitfield.disp64 = 0;
 	      }
+#endif
 	    if (!op_disp && i.types[op].bitfield.baseindex)
 	      {
 		i.types[op].bitfield.disp8 = 0;
diff --git a/ld/ldfile.c b/ld/ldfile.c
index 96f9ecc..f129487 100644
--- a/ld/ldfile.c
+++ b/ld/ldfile.c
@@ -43,6 +43,9 @@ const char * ldfile_output_machine_name = "";
 unsigned long ldfile_output_machine;
 enum bfd_architecture ldfile_output_architecture;
 search_dirs_type * search_head;
+/* cocotron.org begin */
+search_dirs_type * framework_search_head;
+/* cocotron.org end */
 
 #ifdef VMS
 static char * slash = "";
@@ -63,6 +66,9 @@ typedef struct search_arch
 static search_dirs_type **search_tail_ptr = &search_head;
 static search_arch_type *search_arch_head;
 static search_arch_type **search_arch_tail_ptr = &search_arch_head;
+/* cocotron.org begin */
+static search_dirs_type **framework_search_tail_ptr = &framework_search_head;
+/* cocotron.org end */
 
 /* Test whether a pathname, after canonicalization, is the same or a
    sub-directory of the sysroot directory.  */
@@ -116,6 +122,22 @@ ldfile_add_library_path (const char *name, bfd_boolean cmdline)
     new_dirs->name = xstrdup (name);
 }
 
+/* cocotron.org begin */
+void
+ldfile_add_framework_path (const char *path)
+{
+  search_dirs_type *new;
+
+  new = xmalloc (sizeof (search_dirs_type));
+  new->next = NULL;
+  new->name = xstrdup (path);
+  new->cmdline = FALSE;
+
+  *framework_search_tail_ptr = new;
+  framework_search_tail_ptr = &new->next;
+}
+/* cocotron.org end */
+
 /* Try to open a BFD for a lang_input_statement.  */
 
 bfd_boolean
@@ -353,19 +375,55 @@ ldfile_open_file_search (const char *arch,
 	return FALSE;
     }
 
-  for (search = search_head; search != NULL; search = search->next)
+/* cocotron.org begin */
+  search_dirs_type **framework_search_array[] = {&framework_search_head, &search_head, NULL};
+  search_dirs_type **library_search_array[] = {&search_head, NULL};
+  search_dirs_type ***search_array = (entry->flags.search_frameworks) ? framework_search_array : library_search_array;
+  for (; *search_array != NULL; ++search_array)
+  for (search = **search_array; search != NULL; search = search->next)
+/* cocotron.org end */
     {
       char *string;
 
+/* cocotron.org begin */
+      char *framework_directory = "";
+      if (entry->flags.search_frameworks)
+        {
+          framework_directory = alloca (strlen (entry->filename) + strlen (".framework") + strlen (slash) + 1);
+          sprintf (framework_directory, "%s.framework%s", entry->filename, slash);
+        }
+/* cocotron.org end */
+
       if (entry->flags.dynamic && !bfd_link_relocatable (&link_info))
 	{
-	  if (ldemul_open_dynamic_archive (arch, search, entry))
+/* cocotron.org begin */
+          char *shared = xmalloc (strlen (search->name) + strlen (slash) + strlen (framework_directory) + 1);
+          sprintf (shared, "%s%s%s", search->name, slash, framework_directory);
+
+          search_dirs_type check;
+          check.next = NULL;
+          check.name = shared;
+          check.cmdline = search->cmdline;
+
+	  if (ldemul_open_dynamic_archive (arch, &check, entry))
+/* cocotron.org end */
 	    return TRUE;
 	}
 
+/* cocotron.org begin */
+      string = xmalloc (strlen (framework_directory) + strlen (search->name)
+        + strlen (slash)
+        + strlen (lib)
+        + strlen (entry->filename)
+        + strlen (arch)
+        + strlen (suffix)
+        + 1);
+/* cocotron.org end */
+
       if (entry->flags.maybe_archive && !entry->flags.full_name_provided)
-	string = concat (search->name, slash, lib, entry->filename,
-			 arch, suffix, (const char *) NULL);
+/* cocotron.org begin */
+        sprintf (string, "%s%s%s%s%s%s%s", search->name, slash, framework_directory, lib, entry->filename, arch, suffix);
+/* cocotron.org end */
       else
 	string = concat (search->name, slash, entry->filename,
 			 (const char *) 0);
diff --git a/ld/ldfile.h b/ld/ldfile.h
index 31f65ff..379a1b8 100644
--- a/ld/ldfile.h
+++ b/ld/ldfile.h
@@ -39,6 +39,9 @@ typedef struct search_dirs {
 } search_dirs_type;
 
 extern search_dirs_type *search_head;
+/* cocotron.org begin */
+extern search_dirs_type *framework_search_head;
+/* cocotron.org end */
 
 extern void ldfile_add_arch
   (const char *);
@@ -48,6 +51,10 @@ extern void ldfile_open_command_file
   (const char *name);
 extern void ldfile_open_default_command_file
   (const char *name);
+/* cocotron.org begin */
+extern void ldfile_add_framework_path
+  (const char *);
+/* cocotron.org end */
 extern void ldfile_open_file
   (struct lang_input_statement_struct *);
 extern bfd_boolean ldfile_try_open_bfd
diff --git a/ld/ldlang.c b/ld/ldlang.c
index c45b912..369d29b 100644
--- a/ld/ldlang.c
+++ b/ld/ldlang.c
@@ -1059,6 +1059,9 @@ new_afile (const char *name,
   p->flags.add_DT_NEEDED_for_regular = input_flags.add_DT_NEEDED_for_regular;
   p->flags.whole_archive = input_flags.whole_archive;
   p->flags.sysrooted = input_flags.sysrooted;
+/* cocotron.org begin */
+  p->flags.search_frameworks = FALSE;
+/* cocotron.org end */
 
   switch (file_type)
     {
@@ -1101,6 +1104,17 @@ new_afile (const char *name,
       p->local_sym_name = name;
       p->flags.real = TRUE;
       break;
+/* cocotron.org begin */
+    case lang_input_file_is_framework_enum:
+      p->flags.maybe_archive = TRUE;
+      p->filename = name;
+      p->flags.real = TRUE;
+      p->local_sym_name = concat ("-l", name, NULL);
+      p->flags.just_syms = FALSE;
+      p->flags.search_dirs = TRUE;
+      p->flags.search_frameworks= TRUE;
+      break;
+/* cocotron.org end */
     default:
       FAIL ();
     }
@@ -1139,6 +1153,28 @@ lang_add_input_file (const char *name,
   return new_afile (name, file_type, target, TRUE);
 }
 
+/* cocotron.org begin */
+extern void
+lang_add_input_filelist (const char *name)
+{
+  FILE *file = fopen (name, "r");
+  char *result, buffer[2048];
+
+  if (file == NULL)
+    fprintf (stderr, "Unable to open %s\n", name);
+
+  while ((result = fgets (buffer, 2048, file)) != NULL)
+    {
+      for (int len = strlen (buffer); len > 0 && buffer[len] < ' '; len--)
+        buffer[len] = '\0';
+
+      lang_add_input_file (xstrdup(buffer), lang_input_file_is_file_enum, NULL);
+    }
+
+  fclose (file);
+}
+/* cocotron.org end */
+
 struct out_section_hash_entry
 {
   struct bfd_hash_entry root;
diff --git a/ld/ldlang.h b/ld/ldlang.h
index 32e5196..ee32d03 100644
--- a/ld/ldlang.h
+++ b/ld/ldlang.h
@@ -31,6 +31,9 @@ typedef enum
   lang_input_file_is_fake_enum,
   lang_input_file_is_search_file_enum,
   lang_input_file_is_file_enum
+/* cocotron.org begin */
+  ,lang_input_file_is_framework_enum
+/* cocotron.org end */
 } lang_input_file_enum_type;
 
 struct _fill_type
@@ -243,6 +246,11 @@ struct lang_input_statement_flags
   /* 1 means search a set of directories for this file.  */
   unsigned int search_dirs : 1;
 
+/* cocotron.org begin */
+  /* 1 means we search the frameworks path */
+  unsigned int search_frameworks : 1;
+/* cocotron.org end */
+
   /* 1 means this was found when processing a script in the sysroot.  */
   unsigned int sysrooted : 1;
 
@@ -599,6 +607,9 @@ extern lang_output_section_statement_type *lang_insert_orphan
    struct orphan_save *, etree_type *, lang_statement_list_type *);
 extern lang_input_statement_type *lang_add_input_file
   (const char *, lang_input_file_enum_type, const char *);
+/* cocotron.org begin */
+extern void lang_add_input_filelist(const char *);
+/* cocotron.org end */
 extern void lang_add_keepsyms_file
   (const char *);
 extern lang_output_section_statement_type *lang_output_section_get
diff --git a/ld/ldlex.h b/ld/ldlex.h
index 6f11e7b..5bd1fd1 100644
--- a/ld/ldlex.h
+++ b/ld/ldlex.h
@@ -144,6 +144,12 @@ enum option_values
   OPTION_PRINT_MEMORY_USAGE,
   OPTION_REQUIRE_DEFINED_SYMBOL,
   OPTION_ORPHAN_HANDLING,
+/* cocotron.org begin */
+  OPTION_FILTER,
+  OPTION_FRAMEWORK,
+  OPTION_FILELIST,
+  OPTION_SINGLE_MODULE
+/* cocotron.org end */
 };
 
 /* The initial parser states.  */
diff --git a/ld/lexsup.c b/ld/lexsup.c
index 4cad209..3cda3aa 100644
--- a/ld/lexsup.c
+++ b/ld/lexsup.c
@@ -125,8 +125,10 @@ static const struct ld_option ld_options[] =
   { {"auxiliary", required_argument, NULL, 'f'},
     'f', N_("SHLIB"), N_("Auxiliary filter for shared object symbol table"),
     TWO_DASHES },
-  { {"filter", required_argument, NULL, 'F'},
-    'F', N_("SHLIB"), N_("Filter for shared object symbol table"),
+/* cocotron.org begin */
+  { {"filter", required_argument, NULL, OPTION_FILTER},
+    '\0', N_("SHLIB"), N_("Filter for shared object symbol table"),
+/* cocotron.org end */
     TWO_DASHES },
   { {NULL, no_argument, NULL, '\0'},
     'g', NULL, N_("Ignored"), ONE_DASH },
@@ -530,6 +532,16 @@ static const struct ld_option ld_options[] =
   { {"orphan-handling", required_argument, NULL, OPTION_ORPHAN_HANDLING},
     '\0', N_("=MODE"), N_("Control how orphan sections are handled."),
     TWO_DASHES },
+/* cocotron.org begin */
+  { {"framework", required_argument, NULL, OPTION_FRAMEWORK },
+    '\0', NULL, N_("Link named framework"), ONE_DASH },
+  { {"filelist", required_argument, NULL, OPTION_FILELIST },
+    '\0', NULL, N_("Link files in filelist"), ONE_DASH },
+  { {"framework-path", required_argument, NULL, 'F' },
+    'F', N_("DIRECTORY"), N_("Add DIRECTORY to framework search path"), ONE_DASH },
+  { {"single_module", no_argument, NULL, OPTION_SINGLE_MODULE },
+    '\0', NULL, N_("Create single module"), ONE_DASH },
+/* cocotron.org end */
 };
 
 #define OPTION_COUNT ARRAY_SIZE (ld_options)
@@ -835,7 +847,9 @@ parse_args (unsigned argc, char **argv)
 	      command_line.auxiliary_filters[c + 1] = NULL;
 	    }
 	  break;
-	case 'F':
+/* cocotron.org begin */
+  case OPTION_FILTER:
+/* cocotron.org end */
 	  command_line.filter_shlib = optarg;
 	  break;
 	case OPTION_FORCE_EXE_SUFFIX:
@@ -1550,6 +1564,23 @@ parse_args (unsigned argc, char **argv)
 	    einfo (_("%P%F: invalid argument to option"
 		     " \"--orphan-handling\"\n"));
 	  break;
+/* cocotron.org begin */
+  case OPTION_FRAMEWORK:
+    input_flags.dynamic = TRUE;
+    lang_add_input_file (optarg, lang_input_file_is_framework_enum, NULL);
+    break;
+
+  case 'F':
+    ldfile_add_framework_path (optarg);
+    break;
+
+  case OPTION_FILELIST:
+    lang_add_input_filelist(optarg);
+    break;
+
+  case OPTION_SINGLE_MODULE:
+    break;
+/* cocotron.org end */
 	}
     }
 
