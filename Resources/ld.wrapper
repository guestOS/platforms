#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
from os import path

import argparse
import os
import re
import shutil
import subprocess
import sys


class ObjectFile(object):
    def __init__(self, name, filepath):
        self.name = name
        self.path = filepath
        self.frameworks = []
        self.libraries = []

    @property
    def path(self):
        return getattr(self, '_filepath')

    @path.setter
    def path(self, filepath):
        filepath = path.realpath(filepath) if filepath else None
        setattr(self, '_filepath', filepath)

    @property
    def dependencies(self):
        return self.frameworks + self.libraries

    @property
    def all_frameworks(self):
        frameworks = list(self.frameworks)
        result = {}
        for framework in frameworks:
            assert (not framework.name in result) or (result[framework.name] == framework.path), """
            Different localtions for framework: %s
            and: %s""" % (result[framework.name], framework.path)

            result[framework.name] = framework.path
            frameworks.extend(framework.frameworks)
        return result

    def add_framework(self, dependency):
        self.frameworks.append(dependency)

    def add_frameworks(self, dictionary):
        for name, path in dictionary.items():
            self.add_framework(ObjectFile(name, path))

    def __repr__(self):
        dependencies = ',\n'.join([dependency.__repr__() for dependency in self.dependencies])
        dependencies = '\n'.join(['\t' + line for line in dependencies.split('\n')] if dependencies else [])
        dependencies += '\n' if dependencies else ''
        return '{%s => %s (\n%s)}' % (self.name, self.path, dependencies)


class Wrapper(object):
    def __init__(self, argv):
        self.command = argv[0]
        self.args = argv[1:]
        self.ld_path = path.join(path.dirname(__file__), 'ld')
        self.readelf_path = path.join(path.dirname(__file__), 'readelf')
        self.emulation = None
        self.output_file = None
        self.linkFileArgs = []
        self.object = None
        self.search_paths = []
        self.options = {}

    def initialize(self, options):
        self.options = options
        if self.options.product_type:
            name = path.splitext(path.basename(path.dirname(self.options.output)))[0]
        else:
            name = self.options.output
        self.object = ObjectFile(name, self.options.output)

    def error(self, message):
        print(self.command + ': ' + message)
        sys.exit(1)

    def message(self, message):
        if self.options.verbose:
            print(message)

    def find_framework(self, framework, search_paths):
        result = []
        for search_path in search_paths:
            framework_path = path.join(search_path, '%s.framework' % framework)
            isdir = path.isdir(framework_path)
            if isdir:
                result.append(framework_path)
            self.message('attempt to open ' + framework_path + (' succeeded' if isdir else ' failed'))
        return result

    def readelf(self, filepath):
        proc = subprocess.Popen([self.readelf_path, '-d', filepath], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, _ = proc.communicate()
        if proc.returncode != 0:
            return None
        libs = re.findall(r'\(NEEDED\)[\w\s:]+\[([^\]]+)\]', output)
        rpaths = re.findall(r'\(RPATH\)[\w\s:]+\[([^\]]+)\]', output)
        rpaths = rpaths[0].split(':') if rpaths else []
        return libs, rpaths

    def load_rpaths(self, filepath):
        info = self.readelf(filepath)
        if not info:
            return None
        libs, rpaths = info
        result = {}
        for rpath in rpaths:
            if rpath.startswith('$ORIGIN') and rpath.endswith('.framework'):
                framework = path.splitext(path.basename(rpath))[0]
                matches = [lib for lib in libs if framework in lib]
                if matches:
                    real_path = path.realpath(rpath.replace('$ORIGIN', path.dirname(filepath)))
                    result[framework] = real_path
        return result

    def get_framework_rpaths(self, framework, framework_paths):
        filter = framework.name + '.'
        for framework_path in framework_paths:
            filenames = os.listdir(framework_path)
            filenames = [filename for filename in filenames if filter in filename]
            for filename in filenames:
                full_path = path.join(framework_path, filename)
                rpaths = self.load_rpaths(full_path)
                if rpaths is not None:
                    framework.path = full_path
                    framework.add_frameworks(rpaths)
                    return True
        return False

    def invoke_ld(self, args):
        self.message(' "%s" %s' % (self.ld_path, ' '.join(args)))

        proc = subprocess.Popen([self.ld_path] + args)
        proc.communicate()
        if proc.returncode == 0:
            pass
        else:
            sys.exit(proc.returncode)

    def process_args(self, args):
        self.search_paths = [arg[2:] for arg in args if arg.startswith('-L')]

        result = []
        it = iter(args)
        while True:
            try:
                arg = it.next()
                if arg == '-framework':
                    self.process_framework(arg, it, result)
                elif arg == '-filelist':
                    self.process_filelist(arg, it, result)
                else:
                    result.append(arg)
            except StopIteration:
                break

        return result

    def process_framework(self, arg, it, result):
        framework = it.next()
        framework_paths = self.find_framework(framework, self.search_paths)
        if not framework_paths:
            self.error('framework not found ' + framework)
        framework = ObjectFile(framework, None)
        self.add_framework(framework, framework_paths, result)
        self.object.add_framework(framework)

    def add_framework(self, framework, framework_paths, result):
        result.extend(['-L' + framework_path for framework_path in framework_paths])
        result.append('-l' + framework.name)

        self.get_framework_rpaths(framework, framework_paths)
        # Emulate framework re-export
        # Note: also prevents 'error adding symbols: DSO missing from command line' for frameworks,
        # but --copy-dt-needed-entries is preferred (as it will include all libraries)
        for dependency in framework.frameworks:
            self.add_framework(dependency, [dependency.path], result)

    def process_filelist(self, arg, it, result):
        filelist = it.next()
        with open(filelist, 'r') as f:
            list = f.read().strip().split('\n')
        fileargs = path.splitext(filelist)[0] + '.LinkFileArgs'
        with open(fileargs, 'w+') as f:
            f.write(' '.join(["'%s'" % filename for filename in list]))
        result.append('@' + fileargs)

    def needs_embedding(self):
        return self.options.product_type in ['app', 'tool']

    def extend_args(self, args):
        result = list(args)
        if self.options.emulation.startswith('elf'):
            if self.options.product_type == 'framework':
                for framework_name, framework_path in self.object.all_frameworks.items():
                    result.append('-rpath=$ORIGIN/../%s.framework' % framework_name)
                result.append('-soname=' + path.basename(self.options.output))
            if self.needs_embedding():
                for framework_name, framework_path in self.object.all_frameworks.items():
                    result.append('-rpath=$ORIGIN/Frameworks/%s.framework' % framework_name)
        return result

    def touch_product(self):
        output = self.options.output
        if self.options.product_type == 'framework' and path.exists(output):
            link_path = path.join(path.dirname(output), self.object.name)
            if not path.exists(link_path):
                os.symlink(path.basename(output), link_path)

    def embed_frameworks(self):
        if not self.needs_embedding():
            return
        bundle_dir = path.dirname(self.object.path)
        frameworks_dir = path.join(bundle_dir, 'Frameworks')
        if not path.exists(frameworks_dir):
            os.makedirs(frameworks_dir)
        for framework_name, framework_path in self.object.all_frameworks.items():
            framework_path = path.dirname(framework_path)
            self.message('Embedding framework %s from %s' % (framework_name, framework_path))
            embedded_path = path.join(frameworks_dir, path.basename(framework_path))
            if path.exists(embedded_path):
                shutil.rmtree(embedded_path)
            shutil.copytree(framework_path, embedded_path, symlinks=True)

    def main(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-o', dest='output')
        parser.add_argument('--output')
        parser.add_argument('-m', dest='emulation')
        parser.add_argument('-v', action='store_true', dest='verbose')
        parser.add_argument('--verbose', action='store_true')
        options, _ = parser.parse_known_args(self.args)

        parser = argparse.ArgumentParser()
        parser.add_argument('--product-type')
        wrapper_options, args = parser.parse_known_args(self.args)

        options.__dict__.update(wrapper_options.__dict__)
        self.initialize(options)

        self.message('guestOS ld wrapper (version 1.0)')
        self.message('InstalledDir: ' + path.dirname(__file__))

        args = self.process_args(args)
        args = self.extend_args(args)
        self.message('Dependency graph:')
        self.message(self.object)
        self.invoke_ld(args)
        self.touch_product()
        self.embed_frameworks()


def main():
    Wrapper(sys.argv).main()


if __name__ == '__main__':
    main()
