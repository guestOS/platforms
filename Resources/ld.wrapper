#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
from os import path

import sys
import subprocess


class Wrapper():
    def __init__(self, argv):
        self.command = argv[0]
        self.args = argv[1:]
        self.verbose = False
        self.ld_path = None
        self.linkFileArgs = []
        self.uses_frameworks = False

    def error(self, message):
        print(self.command + ': ' + message)
        sys.exit(1)

    def find_framework(self, framework, search_paths):
        result = []
        for search_path in search_paths:
            framework_path = path.join(search_path, '%s.framework' % framework)
            if path.isdir(framework_path):
                result.append(framework_path)
        return result

    def process_framework_args(self, args):
        search_paths = [arg[2:] for arg in args if arg.startswith('-L')]

        result, index = [], 0
        while index < len(args):
            arg = args[index]
            if arg == '-framework':
                self.uses_frameworks = True
                framework = args[index + 1]
                framework_paths = self.find_framework(framework, search_paths)
                if not framework_paths:
                    self.error('framework not found ' + framework)
                result.extend(['-L' + framework_path for framework_path in framework_paths])
                result.append('-l' + framework)
                index += 2
            else:
                result.append(arg)
                index += 1

        return result

    def process_filelist_args(self, args):
        result, index = [], 0
        while index < len(args):
            arg = args[index]
            if arg == '-filelist':
                filelist = args[index + 1]
                with open(filelist, 'r') as f:
                    list = f.read().strip().split('\n')
                fileargs = path.splitext(filelist)[0] + '.LinkFileArgs'
                with open(fileargs, 'w+') as f:
                    f.write(' '.join(["'%s'" % filename for filename in list]))
                result.append('@' + fileargs)
                index += 2
            else:
                result.append(arg)
                index += 1
        return result

    def process_wrapper_args(self, args):
        self.verbose = ('-v' in args) or ('--verbose' in args)
        if self.verbose:
            print('guestOS ld wrapper (version 1.0)')
            print('InstalledDir: ' + path.dirname(__file__))

        self.ld_path = path.join(path.dirname(__file__), 'ld')
        return args

    def invoke_ld(self, args):
        if self.verbose:
            print(' "%s" %s' % (self.ld_path, ' '.join(args)))

        proc = subprocess.Popen([self.ld_path] + args)
        proc.communicate()
        if proc.returncode == 0:
            pass
        else:
            sys.exit(proc.returncode)

    def main(self):
        args = self.args
        args = self.process_wrapper_args(args)
        args = self.process_framework_args(args)
        args = self.process_filelist_args(args)
        self.invoke_ld(args)


def main():
    Wrapper(sys.argv).main()


if __name__ == '__main__':
    main()
